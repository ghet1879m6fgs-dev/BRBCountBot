import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from datetime import datetime, date
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = "8246055725:AAFVR4FK3mRWBb-HVdMSu8S2X8aQMOHoF_Y"

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Telegram username
ACCESS_CONFIG = {
    'head': ['ocean_jandal', 'director_username', 'your_username'],
    'manager': ['prlbrlgrl', 'manager2', 'sales1', 'sales2']
}

# –¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–º–µ–Ω—é
TARIFFS = {
    'mts_real': {
        'name': 'üì± –ú–¢–° –†–∏–∏–ª',
        'submenu': {
            'mts_real_1month': '1 –ú–µ—Å—è—Ü',
            'mts_real_subscription': '–ê–±–æ–Ω–µ–º–µ–Ω—Ç'
        }
    },
    'mts_more': {
        'name': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ',
        'submenu': {
            'mts_more_1month': '1 –ú–µ—Å—è—Ü',
            'mts_more_subscription': '–ê–±–æ–Ω–µ–º–µ–Ω—Ç'
        }
    },
    'mts_super': {
        'name': '‚ö° –ú–¢–° –°—É–ø–µ—Ä',
        'submenu': None
    },
    'membrane': {
        'name': 'üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞',
        'submenu': None
    },
    'yandex_search': {
        'name': 'üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫',
        'submenu': None
    },
    'yandex_x5': {
        'name': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5',
        'submenu': {
            'yandex_x5_new': '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
            'yandex_x5_returning': '–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è –∫–ª–∏–µ–Ω—Ç',
            'yandex_x5_active': '–î–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç'
        }
    },
    'yandex_kids': {
        'name': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º',
        'submenu': {
            'yandex_kids_new': '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
            'yandex_kids_returning': '–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è –∫–ª–∏–µ–Ω—Ç',
            'yandex_kids_active': '–î–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç'
        }
    }
}

# –¶–µ–Ω—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
PRICE_MAP = {
    'mts_real_1month': 81,
    'mts_real_subscription': 155,
    'mts_more_1month': 81,
    'mts_more_subscription': 175,
    'mts_super': 273,
    'membrane': 494,
    'yandex_search': 180,
    'yandex_x5_new': 650,
    'yandex_x5_returning': 250,
    'yandex_x5_active': 50,
    'yandex_kids_new': 650,
    'yandex_kids_returning': 250,
    'yandex_kids_active': 50
}

class SalesBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.sales_data = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("stats", self.stats),
            CommandHandler("report", self.report),
            CommandHandler("help", self.help_command),
            CommandHandler("id", self.get_id),
            CommandHandler("export", self.export_data),
            CallbackQueryHandler(self.button_handler)
        ]
        
        for handler in handlers:
            self.application.add_handler(handler)
        
        self.ensure_directories()
        self.migrate_old_data()

    def ensure_directories(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        directories = ['data/daily', 'data/monthly', 'data/backups']
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
            logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {directory}")

    def migrate_old_data(self) -> None:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–ª—é—á–∏
        expected_keys = set(TARIFFS.keys())
        for tariff_info in TARIFFS.values():
            if tariff_info.get('submenu'):
                expected_keys.update(tariff_info['submenu'].keys())

        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
        key_mapping = {}
        for tariff_key, tariff_info in TARIFFS.items():
            submenu = tariff_info.get('submenu') or {}
            for sub_key, human_name in submenu.items():
                # –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –≤–∏–¥–∞ "—Ç–∞—Ä–∏—Ñ_—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ"
                old_key = f"{tariff_key}_{human_name}"
                key_mapping[old_key] = sub_key
                key_mapping[old_key.strip()] = sub_key

        def process_file(file_path: str) -> bool:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            if not os.path.exists(file_path):
                return False
                
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                changed = False
                for user_data in data.values():
                    sales = user_data.get('sales', {})
                    new_sales = {}
                    
                    for key, value in sales.items():
                        if key in expected_keys:
                            new_sales[key] = new_sales.get(key, 0) + value
                        elif key in key_mapping:
                            new_key = key_mapping[key]
                            new_sales[new_key] = new_sales.get(new_key, 0) + value
                            changed = True
                        else:
                            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                            new_key = self._auto_convert_key(key)
                            if new_key and new_key in expected_keys:
                                new_sales[new_key] = new_sales.get(new_key, 0) + value
                                changed = True
                            else:
                                new_sales[key] = new_sales.get(key, 0) + value
                    
                    user_data['sales'] = new_sales
                
                if changed:
                    # –°–æ–∑–¥–∞–µ–º backup
                    backup_path = f"{file_path}.backup"
                    try:
                        if os.path.exists(backup_path):
                            os.remove(backup_path)
                        os.rename(file_path, backup_path)
                    except OSError:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup –¥–ª—è {file_path}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"–§–∞–π–ª –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {file_path}")
                
                return changed
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                return False

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        for folder in ['data/daily', 'data/monthly']:
            if os.path.exists(folder):
                for filename in os.listdir(folder):
                    if filename.endswith('.json') and not filename.endswith('.backup'):
                        file_path = os.path.join(folder, filename)
                        process_file(file_path)
        
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _auto_convert_key(self, key: str) -> str | None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
        if '_' not in key:
            return None
            
        parts = key.split('_', 1)
        if len(parts) != 2:
            return None
            
        tariff_key, suffix = parts
        if tariff_key not in TARIFFS:
            return None
            
        submenu = TARIFFS[tariff_key].get('submenu') or {}
        for sub_key, human_name in submenu.items():
            if human_name.lower() == suffix.lower():
                return sub_key
                
        return None

    def get_user_role(self, username: str | None) -> str | None:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        if not username:
            return None
            
        clean_username = username.lower().replace('@', '')
        
        if clean_username in ACCESS_CONFIG['head']:
            return 'head'
        elif clean_username in ACCESS_CONFIG['manager']:
            return 'manager'
        else:
            return None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if not user:
            return
            
        role = self.get_user_role(user.username)
        if not role:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id not in self.sales_data:
            self.sales_data[user.id] = {
                'username': user.username,
                'full_name': user.full_name,
                'role': role,
                'sales': {}
            }

        await self.show_main_menu(update, user.id, role, is_new_message=True)

    async def show_main_menu(self, update, user_id: int, role: str, is_new_message: bool = False) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if role == 'manager':
            keyboard = [
                [InlineKeyboardButton("üì± –ú–¢–° –†–∏–∏–ª", callback_data="tariff_mts_real")],
                [InlineKeyboardButton("üì∂ –ú–¢–° –ë–æ–ª—å—à–µ", callback_data="tariff_mts_more")],
                [InlineKeyboardButton("‚ö° –ú–¢–° –°—É–ø–µ—Ä", callback_data="tariff_mts_super")],
                [InlineKeyboardButton("üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞", callback_data="tariff_membrane")],
                [InlineKeyboardButton("üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫", callback_data="tariff_yandex_search")],
                [InlineKeyboardButton("üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5", callback_data="tariff_yandex_x5")],
                [InlineKeyboardButton("üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º", callback_data="tariff_yandex_kids")],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="stats_daily"),
                    InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_total")
                ],
                [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")]
            ]
            welcome_text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:"
        else:
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="stats_daily")],
                [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_total")],
                [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers")],
                [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset_stats")],
                [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")]
            ]
            welcome_text = "üëë –ü–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:"

        reply_markup = InlineKeyboardMarkup(keyboard)

        if is_new_message or isinstance(update, Update):
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            await update.edit_message_text(welcome_text, reply_markup=reply_markup)

    async def show_tariff_submenu(self, query, tariff_key: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞"""
        tariff_info = TARIFFS.get(tariff_key)
        if not tariff_info:
            await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if tariff_info['submenu']:
            keyboard = []
            for sub_key, sub_name in tariff_info['submenu'].items():
                keyboard.append([InlineKeyboardButton(sub_name, callback_data=sub_key)])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üéØ {tariff_info['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
                reply_markup=reply_markup
            )
        else:
            await self.record_sale(query, tariff_key)

    async def record_sale(self, query, record_key: str, display_name: str | None = None) -> None:
        """–ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏"""
        user_id = query.from_user.id
        if user_id not in self.sales_data:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            return

        user_data = self.sales_data[user_id]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞
        normalized_key = self.normalize_key(record_key)
        if not display_name:
            display_name = self.get_display_name(normalized_key)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if normalized_key not in user_data['sales']:
            user_data['sales'][normalized_key] = 0
        user_data['sales'][normalized_key] += 1

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        try:
            self.save_daily_sale(user_id, normalized_key)
            self.save_monthly_sale(user_id, normalized_key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return

        current_count = user_data['sales'][normalized_key]

        await query.edit_message_text(
            f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {display_name}\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {current_count}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        )

        await asyncio.sleep(2)
        await self.show_main_menu(query, user_id, user_data['role'])

    def normalize_key(self, key: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞ —Ç–∞—Ä–∏—Ñ–∞"""
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if key in TARIFFS:
            return key
            
        # –ü–æ–∏—Å–∫ –≤ –ø–æ–¥–º–µ–Ω—é
        for tariff_info in TARIFFS.values():
            submenu = tariff_info.get('submenu') or {}
            if key in submenu:
                return key
                
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if '_' in key:
            parts = key.split('_', 1)
            if len(parts) == 2:
                tariff_key, suffix = parts
                if tariff_key in TARIFFS:
                    submenu = TARIFFS[tariff_key].get('submenu') or {}
                    for sub_key, human_name in submenu.items():
                        if human_name == suffix or human_name.strip() == suffix.strip():
                            return sub_key
                            
        return key

    def get_display_name(self, tariff_key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
        display_names = {
            'mts_real_1month': 'üì± –ú–¢–° –†–∏–∏–ª (1 –ú–µ—Å—è—Ü)',
            'mts_real_subscription': 'üì± –ú–¢–° –†–∏–∏–ª (–ê–±–æ–Ω–µ–º–µ–Ω—Ç)',
            'mts_real': 'üì± –ú–¢–° –†–∏–∏–ª',
            'mts_more_1month': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ (1 –ú–µ—Å—è—Ü)',
            'mts_more_subscription': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ (–ê–±–æ–Ω–µ–º–µ–Ω—Ç)',
            'mts_more': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ',
            'mts_super': '‚ö° –ú–¢–° –°—É–ø–µ—Ä',
            'membrane': 'üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞',
            'yandex_search': 'üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫',
            'yandex_x5_new': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–ù–æ–≤—ã–π)',
            'yandex_x5_returning': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è)',
            'yandex_x5_active': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–î–µ–π—Å—Ç–≤—É—é—â–∏–π)',
            'yandex_x5': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5',
            'yandex_kids_new': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–ù–æ–≤—ã–π)',
            'yandex_kids_returning': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è)',
            'yandex_kids_active': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–î–µ–π—Å—Ç–≤—É—é—â–∏–π)',
            'yandex_kids': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º'
        }
        
        normalized_key = self.normalize_key(tariff_key)
        return display_names.get(normalized_key, normalized_key)

    def save_daily_sale(self, user_id: int, tariff_key: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = date.today().isoformat()
        filename = f'data/daily/sales_{today}.json'
        self._save_sale_to_file(filename, user_id, tariff_key)

    def save_monthly_sale(self, user_id: int, tariff_key: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_month = datetime.now().strftime('%Y-%m')
        filename = f'data/monthly/sales_{current_month}.json'
        self._save_sale_to_file(filename, user_id, tariff_key)

    def _save_sale_to_file(self, filename: str, user_id: int, tariff_key: str) -> None:
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {}

            user_str = str(user_id)
            if user_str not in data:
                user_data = self.sales_data.get(user_id, {})
                data[user_str] = {
                    'username': user_data.get('username', ''),
                    'full_name': user_data.get('full_name', ''),
                    'sales': {}
                }

            if tariff_key not in data[user_str]['sales']:
                data[user_str]['sales'][tariff_key] = 0

            data[user_str]['sales'][tariff_key] += 1

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª {filename}: {e}")
            raise

    def get_daily_stats(self, user_id: int | None = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = date.today().isoformat()
        filename = f'data/daily/sales_{today}.json'
        return self._load_stats_from_file(filename, user_id)

    def get_monthly_stats(self, user_id: int | None = None, month: str | None = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not month:
            month = datetime.now().strftime('%Y-%m')
        filename = f'data/monthly/sales_{month}.json'
        return self._load_stats_from_file(filename, user_id)

    def _load_stats_from_file(self, filename: str, user_id: int | None) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(filename):
            return {}
            
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            if user_id is not None:
                user_str = str(user_id)
                return data.get(user_str, {'sales': {}})
            else:
                return data
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
            return {}

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user = update.effective_user
        if not user:
            return
            
        user_id = user.id
        if user_id not in self.sales_data:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        daily_stats = self.get_daily_stats(user_id)
        await self._display_stats_message(update.message, daily_stats, "—Å–µ–≥–æ–¥–Ω—è", "–¥–µ–Ω—å")

    async def report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /report - –æ–±—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        user = update.effective_user
        if not user:
            return
            
        user_id = user.id
        if user_id not in self.sales_data:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        user_data = self.sales_data[user_id]
        if user_data['role'] != 'head':
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            return

        monthly_stats = self.get_monthly_stats()
        await self._display_report_message(update.message, monthly_stats)

    async def _display_stats_message(self, message, stats: dict, period_name: str, period_type: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        sales_data = stats.get('sales', {})
        
        if not sales_data:
            current_date = datetime.now()
            if period_type == "–¥–µ–Ω—å":
                date_str = current_date.strftime('%d.%m.%Y')
            else:
                date_str = current_date.strftime('%B %Y')
                
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name} ({date_str})\n\nüì≠ –ü—Ä–æ–¥–∞–∂ –µ—â–µ –Ω–µ—Ç"
        else:
            total_sales = 0
            message_lines = []
            
            sorted_sales = sorted(sales_data.items(), key=lambda x: self.get_display_name(x[0]))
            for tariff_key, count in sorted_sales:
                tariff_name = self.get_display_name(tariff_key)
                message_lines.append(f"‚Ä¢ {tariff_name}: {count} –ø—Ä–æ–¥–∞–∂")
                total_sales += count
                
            current_date = datetime.now()
            if period_type == "–¥–µ–Ω—å":
                date_str = current_date.strftime('%d.%m.%Y')
            else:
                date_str = current_date.strftime('%B %Y')
                
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name} ({date_str})\n\n" + "\n".join(message_lines)
            text += f"\n\nüìà –í—Å–µ–≥–æ –∑–∞ {period_type}: {total_sales} –ø—Ä–æ–¥–∞–∂"

        await message.reply_text(text)

    async def _display_report_message(self, message, monthly_stats: dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        if not monthly_stats:
            text = f"üìà –û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ {datetime.now().strftime('%B %Y')}\n\nüì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –µ—â–µ –Ω–µ—Ç"
        else:
            total_all_sales = 0
            managers_stats = {}
            
            for user_str, user_data in monthly_stats.items():
                manager_name = user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                managers_stats[manager_name] = {'total': 0}
                
                for count in user_data.get('sales', {}).values():
                    managers_stats[manager_name]['total'] += count
                    total_all_sales += count

            text = f"üìà –û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            text += "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–ù–ï–î–ñ–ï–†–ê–ú:\n\n"
            for manager, stats in sorted(managers_stats.items()):
                text += f"üë§ {manager}: {stats['total']} –ø—Ä–æ–¥–∞–∂\n"
            
            text += f"\nüéØ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–ê–ñ: {total_all_sales}"

        await message.reply_text(text)

    async def show_daily_stats(self, query, user_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ inline —Ä–µ–∂–∏–º–µ"""
        daily_stats = self.get_daily_stats(user_id)
        await self._display_stats_inline(query, daily_stats, "—Å–µ–≥–æ–¥–Ω—è", "–¥–µ–Ω—å")

    async def show_total_stats(self, query, user_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ inline —Ä–µ–∂–∏–º–µ"""
        monthly_stats = self.get_monthly_stats(user_id)
        await self._display_stats_inline(query, monthly_stats, "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–º–µ—Å—è—Ü")

    async def _display_stats_inline(self, query, stats: dict, period_name: str, period_type: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ inline —Ä–µ–∂–∏–º–µ"""
        sales_data = stats.get('sales', {})
        
        if not sales_data:
            current_date = datetime.now()
            if period_type == "–¥–µ–Ω—å":
                date_str = current_date.strftime('%d.%m.%Y')
            else:
                date_str = current_date.strftime('%B %Y')
                
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name} ({date_str})\n\nüì≠ –ü—Ä–æ–¥–∞–∂ –µ—â–µ –Ω–µ—Ç"
        else:
            total_sales = 0
            message_lines = []
            
            sorted_sales = sorted(sales_data.items(), key=lambda x: self.get_display_name(x[0]))
            for tariff_key, count in sorted_sales:
                tariff_name = self.get_display_name(tariff_key)
                message_lines.append(f"‚Ä¢ {tariff_name}: {count} –ø—Ä–æ–¥–∞–∂")
                total_sales += count
                
            current_date = datetime.now()
            if period_type == "–¥–µ–Ω—å":
                date_str = current_date.strftime('%d.%m.%Y')
            else:
                date_str = current_date.strftime('%B %Y')
                
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name} ({date_str})\n\n" + "\n".join(message_lines)
            message += f"\n\nüìà –í—Å–µ–≥–æ –∑–∞ {period_type}: {total_sales} –ø—Ä–æ–¥–∞–∂"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_head_daily_stats(self, query) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        daily_stats = self.get_daily_stats()
        await self._display_head_stats_inline(query, daily_stats, "—Å–µ–≥–æ–¥–Ω—è", "–¥–µ–Ω—å")

    async def show_head_total_stats(self, query) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        monthly_stats = self.get_monthly_stats()
        await self._display_head_stats_inline(query, monthly_stats, "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–º–µ—Å—è—Ü")

    async def _display_head_stats_inline(self, query, stats: dict, period_name: str, period_type: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ inline —Ä–µ–∂–∏–º–µ"""
        if not stats:
            current_date = datetime.now()
            if period_type == "–¥–µ–Ω—å":
                date_str = current_date.strftime('%d.%m.%Y')
            else:
                date_str = current_date.strftime('%B %Y')
                
            message = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name} ({date_str})\n\nüì≠ –ü—Ä–æ–¥–∞–∂ –µ—â–µ –Ω–µ—Ç"
        else:
            total_all_sales = 0
            message_lines = []
            
            for user_str, user_data in stats.items():
                manager_name = user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                manager_total = 0
                manager_lines = []
                
                for tariff_key, count in user_data.get('sales', {}).items():
                    tariff_name = self.get_display_name(tariff_key)
                    manager_lines.append(f"   ‚Ä¢ {tariff_name}: {count}")
                    manager_total += count
                
                total_all_sales += manager_total
                message_lines.append(f"üë§ {manager_name}: {manager_total} –ø—Ä–æ–¥–∞–∂")
                message_lines.extend(manager_lines)
                message_lines.append("")
            
            current_date = datetime.now()
            if period_type == "–¥–µ–Ω—å":
                date_str = current_date.strftime('%d.%m.%Y')
            else:
                date_str = current_date.strftime('%B %Y')
                
            message = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name} ({date_str})\n\n" + "\n".join(message_lines)
            message += f"\nüéØ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–ê–ñ: {total_all_sales}"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_manage_managers(self, query) -> None:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        monthly_stats = self.get_monthly_stats()
        managers = []

        for user_str, user_data in monthly_stats.items():
            full_name = user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            total_sales = sum(user_data.get('sales', {}).values())
            managers.append({
                'id': user_str,
                'full_name': full_name,
                'total_sales': total_sales
            })

        keyboard = []
        for manager in managers:
            button_text = f"üë§ {manager['full_name']} ({manager['total_sales']} –ø—Ä–æ–¥–∞–∂)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"manager_{manager['id']}")])

        keyboard.extend([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:", reply_markup=reply_markup)

    async def show_reset_options(self, query, manager_id: str | None = None) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if manager_id:
            try:
                manager_id_int = int(manager_id)
                manager_data = self.sales_data.get(manager_id_int)
                if manager_data:
                    message = f"üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {manager_data['full_name']}\n\n"
                    keyboard = [
                        [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"reset_daily_{manager_id}")],
                        [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"reset_monthly_{manager_id}")],
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", callback_data="manage_managers")]
                    ]
                else:
                    message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            except ValueError:
                message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        else:
            message = "üîÑ –°–±—Ä–æ—Å –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
            keyboard = [
                [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_all_daily")],
                [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_all_monthly")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    def reset_daily_stats(self, manager_id: str | None = None) -> None:
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = date.today().isoformat()
        filename = f'data/daily/sales_{today}.json'
        self._reset_stats_file(filename, manager_id)

    def reset_monthly_stats(self, manager_id: str | None = None) -> None:
        """–°–±—Ä–æ—Å –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_month = datetime.now().strftime('%Y-%m')
        filename = f'data/monthly/sales_{current_month}.json'
        self._reset_stats_file(filename, manager_id)

    def _reset_stats_file(self, filename: str, manager_id: str | None) -> None:
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not os.path.exists(filename):
            return

        if manager_id == "all" or not manager_id:
            os.remove(filename)
        else:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                if manager_id in data:
                    data[manager_id]['sales'] = {}
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def show_calculator(self, query, user_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–æ–≤"""
        user_data = self.sales_data.get(user_id, {})
        role = user_data.get('role', 'manager')

        if role == 'head':
            monthly_stats = self.get_monthly_stats()
            if not monthly_stats:
                message = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"
            else:
                total_all = 0
                message_lines = [f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–∞ ‚Äî {datetime.now().strftime('%B %Y')}\n"]
                
                for user_str, udata in monthly_stats.items():
                    manager_total = 0
                    message_lines.append(f"\nüë§ {udata.get('full_name', '‚Äî')}:")
                    
                    for tariff_key, count in udata.get('sales', {}).items():
                        price = PRICE_MAP.get(tariff_key, 0)
                        subtotal = price * count
                        manager_total += subtotal
                        message_lines.append(f"   ‚Ä¢ {self.get_display_name(tariff_key)}: {count} √ó {price} = {subtotal} ‚ÇΩ")
                    
                    message_lines.append(f"   ‚ûú –í—Å–µ–≥–æ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_total} ‚ÇΩ")
                    total_all += manager_total
                
                message_lines.append(f"\nüéØ –ò–¢–û–ì–û –ü–û –í–°–ï–ú –ú–ï–ù–ï–î–ñ–ï–†–ê–ú: {total_all} ‚ÇΩ")
                message = "\n".join(message_lines)
        else:
            monthly_stats = self.get_monthly_stats(user_id)
            sales_data = monthly_stats.get('sales', {}) if monthly_stats else {}
            
            if not sales_data:
                message = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
            else:
                total = 0
                message_lines = [f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–∞ ‚Äî {datetime.now().strftime('%B %Y')}\n"]
                
                for tariff_key, count in sales_data.items():
                    price = PRICE_MAP.get(tariff_key, 0)
                    subtotal = price * count
                    total += subtotal
                    message_lines.append(f"‚Ä¢ {self.get_display_name(tariff_key)}: {count} √ó {price} = {subtotal} ‚ÇΩ")
                
                message_lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ")
                message = "\n".join(message_lines)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        if user_id not in self.sales_data:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            return

        user_data = self.sales_data[user_id]
        data = query.data

        try:
            if data == "back_to_main":
                await self.show_main_menu(query, user_id, user_data['role'])
            elif data == "stats_daily":
                if user_data['role'] == 'head':
                    await self.show_head_daily_stats(query)
                else:
                    await self.show_daily_stats(query, user_id)
            elif data == "stats_total":
                if user_data['role'] == 'head':
                    await self.show_head_total_stats(query)
                else:
                    await self.show_total_stats(query, user_id)
            elif data == "manage_managers":
                await self.show_manage_managers(query)
            elif data == "reset_stats":
                await self.show_reset_options(query)
            elif data == "export_data":
                await self.export_data_from_button(query)
            elif data == "calculator":
                await self.show_calculator(query, user_id)
            elif data.startswith("manager_"):
                manager_id = data.split('_')[1]
                await self.show_reset_options(query, manager_id)
            elif data.startswith("reset_daily_"):
                manager_id = data.split('_')[2] if data != "reset_all_daily" else "all"
                self.reset_daily_stats(manager_id)
                await query.edit_message_text("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                await asyncio.sleep(1)
                await self.show_main_menu(query, user_id, user_data['role'])
            elif data.startswith("reset_monthly_"):
                manager_id = data.split('_')[2] if data != "reset_all_monthly" else "all"
                self.reset_monthly_stats(manager_id)
                await query.edit_message_text("‚úÖ –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                await asyncio.sleep(1)
                await self.show_main_menu(query, user_id, user_data['role'])
            elif data.startswith("tariff_"):
                tariff_key = data[7:]
                await self.show_tariff_submenu(query, tariff_key)
            elif data in self._get_all_submenu_keys():
                await self.record_sale(query, data)
            elif data in TARIFFS and TARIFFS[data].get('submenu') is None:
                await self.record_sale(query, data)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def _get_all_submenu_keys(self) -> set:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–¥–º–µ–Ω—é"""
        keys = set()
        for tariff_info in TARIFFS.values():
            submenu = tariff_info.get('submenu')
            if submenu:
                keys.update(submenu.keys())
        return keys

    async def export_data_from_button(self, query) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–Ω–æ–ø–∫–∏"""
        user_id = query.from_user.id
        user_data = self.sales_data[user_id]
        
        if user_data['role'] != 'head':
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            return

        await query.edit_message_text("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
        report = self._generate_text_report()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4000
        if len(report) > max_length:
            parts = [report[i:i+max_length] for i in range(0, len(report), max_length)]
            for part in parts:
                await query.message.reply_text(f"```\n{part}\n```", parse_mode='Markdown')
        else:
            await query.message.reply_text(f"```\n{report}\n```", parse_mode='Markdown')
            
        await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    async def export_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /export"""
        user = update.effective_user
        if not user:
            return
            
        user_id = user.id
        if user_id not in self.sales_data:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        user_data = self.sales_data[user_id]
        if user_data['role'] != 'head':
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            return

        await update.message.reply_text("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
        report = self._generate_text_report()
        
        max_length = 4000
        if len(report) > max_length:
            parts = [report[i:i+max_length] for i in range(0, len(report), max_length)]
            for part in parts:
                await update.message.reply_text(f"```\n{part}\n```", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"```\n{report}\n```", parse_mode='Markdown')
            
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    def _generate_text_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_lines = []
        report_lines.append("=" * 50)
        report_lines.append("–û–¢–ß–ï–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú")
        report_lines.append(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append("=" * 50)
        
        # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        daily_stats = self.get_daily_stats()
        report_lines.append("\nüìä –î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        if daily_stats:
            for user_str, user_data in daily_stats.items():
                report_lines.append(f"\nüë§ {user_data.get('full_name', '‚Äî')}:")
                for tariff_key, count in user_data.get('sales', {}).items():
                    report_lines.append(f"   ‚Ä¢ {self.get_display_name(tariff_key)}: {count}")
        else:
            report_lines.append("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        monthly_stats = self.get_monthly_stats()
        report_lines.append("\nüìà –ú–ï–°–Ø–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        if monthly_stats:
            for user_str, user_data in monthly_stats.items():
                total = sum(user_data.get('sales', {}).values())
                report_lines.append(f"\nüë§ {user_data.get('full_name', '‚Äî')}: {total} –ø—Ä–æ–¥–∞–∂")
                for tariff_key, count in user_data.get('sales', {}).items():
                    report_lines.append(f"   ‚Ä¢ {self.get_display_name(tariff_key)}: {count}")
        else:
            report_lines.append("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
        return "\n".join(report_lines)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "ü§ñ *–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:*\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/report - –û–±—â–∏–π –æ—Ç—á–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)\n"
            "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/id - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID –∏ username\n\n"
            "*–î–û–°–¢–£–ü–ù–´–ï –¢–ê–†–ò–§–´:*\n"
            "‚Ä¢ üì± –ú–¢–° –†–∏–∏–ª (1 –ú–µ—Å—è—Ü/–ê–±–æ–Ω–µ–º–µ–Ω—Ç)\n"
            "‚Ä¢ üì∂ –ú–¢–° –ë–æ–ª—å—à–µ (1 –ú–µ—Å—è—Ü/–ê–±–æ–Ω–µ–º–µ–Ω—Ç)\n"
            "‚Ä¢ ‚ö° –ú–¢–° –°—É–ø–µ—Ä\n"
            "‚Ä¢ üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞\n"
            "‚Ä¢ üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫\n"
            "‚Ä¢ üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–ù–æ–≤—ã–π/–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è/–î–µ–π—Å—Ç–≤—É—é—â–∏–π)\n"
            "‚Ä¢ üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–ù–æ–≤—ã–π/–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è/–î–µ–π—Å—Ç–≤—É—é—â–∏–π)\n\n"
            "*üìä –°–ò–°–¢–ï–ú–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò:*\n"
            "- –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)\n"
            "- –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ)\n"
            "- –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )

        if isinstance(update, Update):
            await update.message.reply_text(help_text, parse_mode='Markdown')
        else:
            await update.edit_message_text(help_text, parse_mode='Markdown')
            await asyncio.sleep(2)
            await self.show_main_menu(update, update.from_user.id, 
                                    self.sales_data[update.from_user.id]['role'])

    async def get_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /id - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user
        if not user:
            return
            
        role = self.get_user_role(user.username)

        message = (
            f"üÜî **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
            f"**ID:** `{user.id}`\n"
            f"**Username:** @{user.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"**–ò–º—è:** {user.full_name}\n"
            f"**–†–æ–ª—å:** {role or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n\n"
            "üìã **–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:**\n"
            "1. –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à username —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é\n"
            "2. –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π /start"
        )

        await update.message.reply_text(message, parse_mode='Markdown')

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("=" * 60)
        print("ü§ñ –ó–ê–ü–£–°–ö –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê")
        print(f"üêç Python version: 3.13.4")
        print("=" * 60)
        
        try:
            self.application.run_polling()
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot = SalesBot(BOT_TOKEN)
    bot.run()