import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from datetime import datetime, date
import os
from openpyxl import Workbook
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
# –í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
BOT_TOKEN = "8246055725:AAFVR4FK3mRWBb-HVdMSu8S2X8aQMOHoF_Y"

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Telegram username
ACCESS_CONFIG = {
    'head': ['ocean_jandal', 'director_username', 'your_username'],
    'manager': ['prlbrlgrl', 'manager2', 'sales1', 'sales2']
}

# –¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–º–µ–Ω—é (–∫–ª—é—á–∏ ‚Äî —Ç–µ –∂–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ)
TARIFFS = {
    'mts_real': {
        'name': 'üì± –ú–¢–° –†–∏–∏–ª',
        'submenu': {
            'mts_real_1month': '1 –ú–µ—Å—è—Ü',
            'mts_real_subscription': '–ê–±–æ–Ω–µ–º–µ–Ω—Ç'
        }
    },
    'mts_more': {
        'name': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ',
        'submenu': {
            'mts_more_1month': '1 –ú–µ—Å—è—Ü',
            'mts_more_subscription': '–ê–±–æ–Ω–µ–º–µ–Ω—Ç'
        }
    },
    'mts_super': {
        'name': '‚ö° –ú–¢–° –°—É–ø–µ—Ä',
        'submenu': None
    },
    'membrane': {
        'name': 'üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞',
        'submenu': None
    },
    'yandex_search': {
        'name': 'üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫',
        'submenu': None
    },
    'yandex_x5': {
        'name': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5',
        'submenu': {
            'yandex_x5_new': '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
            'yandex_x5_returning': '–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è –∫–ª–∏–µ–Ω—Ç',
            'yandex_x5_active': '–î–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç'
        }
    },
    'yandex_kids': {
        'name': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º',
        'submenu': {
            'yandex_kids_new': '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
            'yandex_kids_returning': '–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è –∫–ª–∏–µ–Ω—Ç',
            'yandex_kids_active': '–î–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç'
        }
    }
}

# –¶–µ–Ω—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∑–∂–µ
PRICE_MAP = {
    'mts_real_1month': 81,
    'mts_real_subscription': 155,
    'mts_more_1month': 81,
    'mts_more_subscription': 175,
    'mts_super': 273,
    'membrane': 494,
    'yandex_search': 180,
    'yandex_x5_new': 650,
    'yandex_x5_returning': 250,
    'yandex_x5_active': 50,
    'yandex_kids_new': 650,
    'yandex_kids_returning': 250,
    'yandex_kids_active': 50
}

class SalesBot:
    def __init__(self, token):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.sales_data = {}  # –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø–∞–º—è—Ç–∏

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CommandHandler("report", self.report))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("id", self.get_id))
        self.application.add_handler(CommandHandler("export", self.export_data))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))

        self.ensure_directories()
        self.migrate_old_data()

    def ensure_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs('data/daily', exist_ok=True)
        os.makedirs('data/monthly', exist_ok=True)
        os.makedirs('data/backups', exist_ok=True)
    def migrate_old_data(self):
        """Migrate malformed keys in existing JSON stats files.
        Replace keys like 'mts_more_1 –ú–µ—Å—è—Ü' with 'mts_more_1month' etc based on TARIFFS mapping.
        Creates backups of modified files with .bak extension.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)...")
        # Build expected keys set
        expected_keys = set(TARIFFS.keys())
        for t_key, t_info in TARIFFS.items():
            submenu = t_info.get('submenu')
            if submenu:
                for sub_key in submenu.keys():
                    expected_keys.add(sub_key)

        # Build mapping from bad human-like keys to correct machine keys
        bad_to_good = {}
        for tariff_key, tariff_info in TARIFFS.items():
            submenu = tariff_info.get('submenu') or {}
            for sub_key, human_name in submenu.items():
                bad_key = f"{tariff_key}_{human_name}"
                bad_to_good[bad_key] = sub_key
                bad_to_good[bad_key.strip()] = sub_key

        def migrate_file(path):
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {path}: {e}")
                return False
            changed = False
            for user_str, user_data in data.items():
                sales = user_data.get('sales', {}) or {}
                new_sales = {}
                for k, v in sales.items():
                    if k in expected_keys:
                        new_sales[k] = new_sales.get(k, 0) + v
                        continue
                    # direct mapping from bad to good
                    if k in bad_to_good:
                        good = bad_to_good[k]
                        new_sales[good] = new_sales.get(good, 0) + v
                        changed = True
                        continue
                    # heuristic: try to match human-readable suffix to submenu human names
                    if '_' in k:
                        prefix, suffix = k.split('_', 1)
                        if prefix in TARIFFS:
                            submenu = TARIFFS[prefix].get('submenu') or {}
                            found = None
                            for sk, sn in submenu.items():
                                if sn == suffix:
                                    found = sk
                                    break
                            if found:
                                new_sales[found] = new_sales.get(found, 0) + v
                                changed = True
                                continue
                    # fallback - keep original key
                    new_sales[k] = new_sales.get(k, 0) + v
                data[user_str]['sales'] = new_sales
            if changed:
                # backup original file
                try:
                    os.rename(path, path + '.bak')
                except Exception:
                    # if rename fails, continue (no backup)
                    pass
                try:
                    with open(path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª {path}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å {path}: {e}")
            return changed

        # Apply migration to existing json files
        for folder in ['data/daily', 'data/monthly']:
            if os.path.exists(folder):
                for fname in os.listdir(folder):
                    if fname.lower().endswith('.json'):
                        full = os.path.join(folder, fname)
                        migrate_file(full)
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


    def migrate_old_data(self):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö JSON-—Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏ –≤–∏–¥–∞
        'mts_more_1 –ú–µ—Å—è—Ü' (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å) –≤–º–µ—Å—Ç–æ 'mts_more_1month' (–º–∞—à–∏–Ω–Ω—ã–π –∫–ª—é—á).
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–±–µ–≥–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ data/daily –∏ data/monthly –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–∞–∫–∏–µ –∫–ª—é—á–∏.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)...")
        # –°–æ–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ –∏ –º–∞–ø–ø–∏–Ω–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
        expected_keys = set(TARIFFS.keys())
        for t_key, t_info in TARIFFS.items():
            submenu = t_info.get('submenu')
            if submenu:
                for sub_key in submenu.keys():
                    expected_keys.add(sub_key)

        bad_to_good = {}
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ —Ñ–æ—Ä–º–∞—Ç–∞: f"{tariff_key}_{human_name}" -> sub_key
        for tariff_key, tariff_info in TARIFFS.items():
            submenu = tariff_info.get('submenu') or {}
            for sub_key, human_name in submenu.items():
                bad_key = f"{tariff_key}_{human_name}"
                bad_to_good[bad_key] = sub_key
                # also consider trimmed spaces variant
                bad_to_good[bad_key.strip()] = sub_key

        def migrate_file(path):
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {path}: {e}")
                return False
            changed = False
            for user_str, user_data in data.items():
                sales = user_data.get('sales', {}) or {}
                new_sales = {}
                for k, v in sales.items():
                    if k in expected_keys:
                        new_sales[k] = new_sales.get(k, 0) + v
                        continue
                    if k in bad_to_good:
                        good = bad_to_good[k]
                        new_sales[good] = new_sales.get(good, 0) + v
                        changed = True
                        continue
                    # heuristic: split by first '_' and try to match human name to submenu
                    if '_' in k:
                        prefix, suffix = k.split('_', 1)
                        if prefix in TARIFFS:
                            submenu = TARIFFS[prefix].get('submenu') or {}
                            found = None
                            for sk, sn in submenu.items():
                                if sn == suffix:
                                    found = sk
                                    break
                            if found:
                                new_sales[found] = new_sales.get(found, 0) + v
                                changed = True
                                continue
                    # fallback: keep original key
                    new_sales[k] = new_sales.get(k, 0) + v
                data[user_str]['sales'] = new_sales
            if changed:
                try:
                    with open(path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª {path}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å {path}: {e}")
            return changed

        for folder in ['data/daily', 'data/monthly']:
            if os.path.exists(folder):
                for fname in os.listdir(folder):
                    if fname.lower().endswith('.json'):
                        full = os.path.join(folder, fname)
                        migrate_file(full)
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


    def get_user_role(self, username):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        if not username:
            return None
        username = username.lower().replace('@', '')
        if username in ACCESS_CONFIG['head']:
            return 'head'
        elif username in ACCESS_CONFIG['manager']:
            return 'manager'
        else:
            return None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        username = user.username

        role = self.get_user_role(username)
        if not role:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        if user.id not in self.sales_data:
            self.sales_data[user.id] = {
                'username': username,
                'full_name': user.full_name,
                'role': role,
                'sales': {}
            }

        await self.show_main_menu(update, user.id, role, is_new_message=True)

    async def show_main_menu(self, update, user_id, role, is_new_message=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
        if role == 'manager':
            keyboard = [
                [InlineKeyboardButton("üì± –ú–¢–° –†–∏–∏–ª", callback_data="tariff_mts_real")],
                [InlineKeyboardButton("üì∂ –ú–¢–° –ë–æ–ª—å—à–µ", callback_data="tariff_mts_more")],
                [InlineKeyboardButton("‚ö° –ú–¢–° –°—É–ø–µ—Ä", callback_data="tariff_mts_super")],
                [InlineKeyboardButton("üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞", callback_data="tariff_membrane")],
                [InlineKeyboardButton("üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫", callback_data="tariff_yandex_search")],
                [InlineKeyboardButton("üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5", callback_data="tariff_yandex_x5")],
                [InlineKeyboardButton("üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º", callback_data="tariff_yandex_kids")],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="stats_daily"),
                    InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_total")
                ],
                [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")]
            ]
            welcome_text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:"
        else:  # head
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="stats_daily")],
                [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_total")],
                [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", callback_data="manage_managers")],
                [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset_stats")],
                [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")]
            ]
            welcome_text = "üëë –ü–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:"

        reply_markup = InlineKeyboardMarkup(keyboard)

        # update –º–æ–∂–µ—Ç –±—ã—Ç—å Update (–∫–æ–º–∞–Ω–¥–∞) –∏–ª–∏ CallbackQuery (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
        if is_new_message or isinstance(update, Update):
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ update ‚Äî —ç—Ç–æ CallbackQuery
            await update.edit_message_text(welcome_text, reply_markup=reply_markup)

    async def show_tariff_submenu(self, query, tariff_key):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        tariff_info = TARIFFS[tariff_key]

        if tariff_info['submenu']:
            keyboard = []
            # submenu keys —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä. 'mts_real_1month')
            for sub_key, sub_name in tariff_info['submenu'].items():
                keyboard.append([InlineKeyboardButton(sub_name, callback_data=sub_key)])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üéØ {tariff_info['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
                reply_markup=reply_markup
            )
        else:
            # –¢–∞—Ä–∏—Ñ –±–µ–∑ –ø–æ–¥–º–µ–Ω—é ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É (–∫–ª—é—á —Ä–∞–≤–µ–Ω tariff_key)
            await self.record_sale(query, tariff_key)

    
    async def record_sale(self, query, record_key, display_name: str = None):
        """–ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª—ã. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–ª—é—á–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é."""
        user_id = query.from_user.id
        user_data = self.sales_data[user_id]

        # Normalize potential human-readable keys to machine keys
        record_key_norm = self.normalize_key(record_key)

        # Determine display name
        if not display_name:
            display_name = self.get_display_name(record_key_norm)

        # Update in-memory counters using normalized key
        if record_key_norm not in user_data['sales']:
            user_data['sales'][record_key_norm] = 0
        user_data['sales'][record_key_norm] += 1

        # Save to files using normalized key
        try:
            self.save_daily_sale(user_id, record_key_norm)
            self.save_monthly_sale(user_id, record_key_norm)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

        current_count = user_data['sales'][record_key_norm]

        await query.edit_message_text(
            f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {display_name}\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂ —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞: {current_count}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        )

        await asyncio.sleep(2)
        await self.show_main_menu(query, user_id, user_data['role'])


    def normalize_key(self, key):
        """–ü–æ–ø—ã—Ç–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å human-like keys –≤ –º–∞—à–∏–Ω–Ω—ã–µ –∫–ª—é—á–∏."""
        # direct match
        if not key:
            return key
        if key in TARIFFS:
            return key
        # if matches submenu machine keys
        for t, info in TARIFFS.items():
            submenu = info.get('submenu') or {}
            if key in submenu.keys():
                return key
        # direct match in display_map keys will be resolved by get_display_name, but for backwards compatibility:
        # If key equals a human-readable suffix like '1 –ú–µ—Å—è—Ü' or '–ê–±–æ–Ω–µ–º–µ–Ω—Ç' or construction 'mts_real_1 –ú–µ—Å—è—Ü',
        # try to map it to corresponding machine key.
        # Case: 'mts_real_1 –ú–µ—Å—è—Ü' -> split and find matching submenu value
        if '_' in key:
            prefix, suffix = key.split('_', 1)
            if prefix in TARIFFS:
                submenu = TARIFFS[prefix].get('submenu') or {}
                for sub_key, human_name in submenu.items():
                    if human_name == suffix or human_name.strip() == suffix.strip():
                        return sub_key
        # fallback: search any submenu where human_name equals key
        for t, info in TARIFFS.items():
            submenu = info.get('submenu') or {}
            for sub_key, human_name in submenu.items():
                if human_name == key or human_name.strip() == key.strip():
                    return sub_key
        return key


    def save_daily_sale(self, user_id, tariff_key):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–¥–∞–∂—É –≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–π–ª"""
        today = date.today().strftime('%Y-%m-%d')
        filename = f'data/daily/sales_{today}.json'

        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                daily_data = json.load(f)
        else:
            daily_data = {}

        user_str = str(user_id)
        if user_str not in daily_data:
            daily_data[user_str] = {
                'username': self.sales_data[user_id]['username'],
                'full_name': self.sales_data[user_id]['full_name'],
                'sales': {}
            }

        if tariff_key not in daily_data[user_str]['sales']:
            daily_data[user_str]['sales'][tariff_key] = 0

        daily_data[user_str]['sales'][tariff_key] += 1

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(daily_data, f, ensure_ascii=False, indent=2)

    def save_monthly_sale(self, user_id, tariff_key):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–¥–∞–∂—É –≤ –º–µ—Å—è—á–Ω—ã–π —Ñ–∞–π–ª"""
        current_month = datetime.now().strftime('%Y-%m')
        filename = f'data/monthly/sales_{current_month}.json'

        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                monthly_data = json.load(f)
        else:
            monthly_data = {}

        user_str = str(user_id)
        if user_str not in monthly_data:
            monthly_data[user_str] = {
                'username': self.sales_data[user_id]['username'],
                'full_name': self.sales_data[user_id]['full_name'],
                'sales': {}
            }

        if tariff_key not in monthly_data[user_str]['sales']:
            monthly_data[user_str]['sales'][tariff_key] = 0

        monthly_data[user_str]['sales'][tariff_key] += 1

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(monthly_data, f, ensure_ascii=False, indent=2)

    def get_daily_stats(self, user_id=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
        today = date.today().strftime('%Y-%m-%d')
        filename = f'data/daily/sales_{today}.json'

        if not os.path.exists(filename):
            return {}

        with open(filename, 'r', encoding='utf-8') as f:
            daily_data = json.load(f)

        if user_id:
            user_str = str(user_id)
            return daily_data.get(user_str, {'sales': {}})

        return daily_data

    def get_monthly_stats(self, user_id=None, month=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü"""
        if not month:
            month = datetime.now().strftime('%Y-%m')

        filename = f'data/monthly/sales_{month}.json'

        if not os.path.exists(filename):
            return {}

        with open(filename, 'r', encoding='utf-8') as f:
            monthly_data = json.load(f)

        if user_id:
            user_str = str(user_id)
            return monthly_data.get(user_str, {'sales': {}})

        return monthly_data

    
    def get_display_name(self, tariff_key):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –∫–ª—é—á–∞–º)."""
        display_map = {
            'mts_real_1month': 'üì± –ú–¢–° –†–∏–∏–ª (1 –ú–µ—Å—è—Ü)',
            'mts_real_subscription': 'üì± –ú–¢–° –†–∏–∏–ª (–ê–±–æ–Ω–µ–º–µ–Ω—Ç)',
            'mts_real': 'üì± –ú–¢–° –†–∏–∏–ª',
            'mts_more_1month': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ (1 –ú–µ—Å—è—Ü)',
            'mts_more_subscription': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ (–ê–±–æ–Ω–µ–º–µ–Ω—Ç)',
            'mts_more': 'üì∂ –ú–¢–° –ë–æ–ª—å—à–µ',
            'mts_super': '‚ö° –ú–¢–° –°—É–ø–µ—Ä',
            'membrane': 'üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞',
            'yandex_search': 'üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫',
            'yandex_x5_new': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–ù–æ–≤—ã–π)',
            'yandex_x5_returning': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è)',
            'yandex_x5_active': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–î–µ–π—Å—Ç–≤—É—é—â–∏–π)',
            'yandex_x5': 'üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5',
            'yandex_kids_new': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–ù–æ–≤—ã–π)',
            'yandex_kids_returning': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è)',
            'yandex_kids_active': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–î–µ–π—Å—Ç–≤—É—é—â–∏–π)',
            'yandex_kids': 'üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º'
        }
        # Normalize key first (handles keys like 'mts_more_1 –ú–µ—Å—è—Ü' etc.)
        try:
            norm = self.normalize_key(tariff_key)
        except Exception:
            norm = tariff_key
        return display_map.get(norm, norm)


    async def show_daily_stats(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        user_data = self.sales_data[user_id]
        daily_stats = self.get_daily_stats(user_id)

        if not daily_stats.get('sales'):
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})\n\n"
            message += "üì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç"
        else:
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})\n\n"
            total_sales = 0

            sorted_sales = sorted(daily_stats['sales'].items(), key=lambda x: self.get_display_name(x[0]))
            for tariff_key, count in sorted_sales:
                tariff_name = self.get_display_name(tariff_key)
                message += f"‚Ä¢ {tariff_name}: {count} –ø—Ä–æ–¥–∞–∂\n"
                total_sales += count

            message += f"\nüìà –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_sales} –ø—Ä–æ–¥–∞–∂"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_total_stats(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        user_data = self.sales_data[user_id]
        monthly_stats = self.get_monthly_stats(user_id)

        if not monthly_stats.get('sales'):
            message = f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            message += "üì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –µ—â–µ –Ω–µ—Ç"
        else:
            message = f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            total_sales = 0

            sorted_sales = sorted(monthly_stats['sales'].items(), key=lambda x: self.get_display_name(x[0]))
            for tariff_key, count in sorted_sales:
                tariff_name = self.get_display_name(tariff_key)
                message += f"‚Ä¢ {tariff_name}: {count} –ø—Ä–æ–¥–∞–∂\n"
                total_sales += count

            message += f"\nüìà –í—Å–µ–≥–æ –∑–∞ –º–µ—Å—è—Ü: {total_sales} –ø—Ä–æ–¥–∞–∂"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_head_daily_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        daily_stats = self.get_daily_stats()

        if not daily_stats:
            message = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})\n\n"
            message += "üì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç"
        else:
            message = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})\n\n"
            total_all_sales = 0
            managers_stats = {}

            for user_str, user_data in daily_stats.items():
                manager_name = user_data['full_name']
                managers_stats[manager_name] = {'total': 0, 'details': {}}

                for tariff_key, count in user_data['sales'].items():
                    tariff_name = self.get_display_name(tariff_key)
                    managers_stats[manager_name]['details'][tariff_name] = count
                    managers_stats[manager_name]['total'] += count
                    total_all_sales += count

            for manager, stats in managers_stats.items():
                message += f"üë§ {manager}: {stats['total']} –ø—Ä–æ–¥–∞–∂\n"
                for tariff, count in stats['details'].items():
                    message += f"   ‚Ä¢ {tariff}: {count}\n"
                message += "\n"

            message += f"üéØ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–ê–ñ: {total_all_sales}"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_head_total_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        monthly_stats = self.get_monthly_stats()

        if not monthly_stats:
            message = f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            message += "üì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –µ—â–µ –Ω–µ—Ç"
        else:
            message = f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            total_all_sales = 0
            managers_stats = {}
            tariff_stats = {}

            for user_str, user_data in monthly_stats.items():
                manager_name = user_data['full_name']
                managers_stats[manager_name] = {'total': 0, 'details': {}}

                for tariff_key, count in user_data['sales'].items():
                    tariff_name = self.get_display_name(tariff_key)

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
                    if tariff_name not in tariff_stats:
                        tariff_stats[tariff_name] = 0
                    tariff_stats[tariff_name] += count

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
                    managers_stats[manager_name]['details'][tariff_name] = count
                    managers_stats[manager_name]['total'] += count
                    total_all_sales += count

            message += "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–ù–ï–î–ñ–ï–†–ê–ú:\n\n"
            for manager, stats in sorted(managers_stats.items()):
                message += f"üë§ {manager}: {stats['total']} –ø—Ä–æ–¥–∞–∂\n"

            message += "\nüì¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–†–ò–§–ê–ú:\n"
            for tariff, count in sorted(tariff_stats.items()):
                message += f"‚Ä¢ {tariff}: {count} –ø—Ä–æ–¥–∞–∂\n"

            message += f"\nüéØ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–ê–ñ: {total_all_sales}"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_manage_managers(self, query):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        managers = []
        monthly_stats = self.get_monthly_stats()

        for user_str, user_data in monthly_stats.items():
            full_name = user_data.get('full_name', '‚Äî')
            total_sales = sum(user_data.get('sales', {}).values())
            managers.append({
                'id': user_str,
                'full_name': full_name,
                'total_sales': total_sales
            })

        keyboard = []
        for manager in managers:
            button_text = f"üë§ {manager['full_name']} ({manager['total_sales']} –ø—Ä–æ–¥–∞–∂)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"manager_{manager['id']}")])

        keyboard.extend([
            [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_total")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_all")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:", reply_markup=reply_markup)

    async def show_reset_options(self, query, manager_id=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if manager_id:
            manager_data = self.sales_data.get(manager_id)
            if manager_data:
                message = f"üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {manager_data['full_name']}\n\n"
                keyboard = [
                    [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"reset_daily_{manager_id}")],
                    [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"reset_monthly_{manager_id}")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", callback_data="manage_managers")]
                ]
            else:
                message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        else:
            message = "üîÑ –°–±—Ä–æ—Å –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
            keyboard = [
                [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_all_daily")],
                [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_all_monthly")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    def reset_daily_stats(self, manager_id=None):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = date.today().strftime('%Y-%m-%d')
        filename = f'data/daily/sales_{today}.json'

        if os.path.exists(filename):
            if manager_id:
                with open(filename, 'r', encoding='utf-8') as f:
                    daily_data = json.load(f)

                user_str = str(manager_id)
                if user_str in daily_data:
                    daily_data[user_str]['sales'] = {}

                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(daily_data, f, ensure_ascii=False, indent=2)
            else:
                os.remove(filename)

    def reset_monthly_stats(self, manager_id=None):
        """–°–±—Ä–æ—Å –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_month = datetime.now().strftime('%Y-%m')
        filename = f'data/monthly/sales_{current_month}.json'

        if os.path.exists(filename):
            if manager_id:
                with open(filename, 'r', encoding='utf-8') as f:
                    monthly_data = json.load(f)

                user_str = str(manager_id)
                if user_str in monthly_data:
                    monthly_data[user_str]['sales'] = {}

                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(monthly_data, f, ensure_ascii=False, indent=2)
            else:
                os.remove(filename)

    async def export_to_excel(self, query):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        try:
            wb = Workbook()

            # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ws_daily = wb.active
            ws_daily.title = "–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            headers = ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–¢–∞—Ä–∏—Ñ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–î–∞—Ç–∞']
            ws_daily.append(headers)

            today = date.today().strftime('%Y-%m-%d')
            daily_stats = self.get_daily_stats()

            for user_str, user_data in daily_stats.items():
                for tariff_key, count in user_data['sales'].items():
                    tariff_name = self.get_display_name(tariff_key)
                    ws_daily.append([user_data['full_name'], tariff_name, count, today])

            # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ws_monthly = wb.create_sheet("–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ws_monthly.append(['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–¢–∞—Ä–∏—Ñ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ú–µ—Å—è—Ü'])

            current_month = datetime.now().strftime('%Y-%m')
            monthly_stats = self.get_monthly_stats()

            for user_str, user_data in monthly_stats.items():
                for tariff_key, count in user_data['sales'].items():
                    tariff_name = self.get_display_name(tariff_key)
                    ws_monthly.append([user_data['full_name'], tariff_name, count, current_month])

            filename = f"data/backups/sales_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            wb.save(filename)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await query.message.reply_document(document=open(filename, 'rb'), caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
            await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in self.sales_data:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            return

        user_data = self.sales_data[user_id]
        data = query.data

        try:
            if data == "back_to_main":
                await self.show_main_menu(query, user_id, user_data['role'])

            elif data == "stats_daily":
                if user_data['role'] == 'head':
                    await self.show_head_daily_stats(query)
                else:
                    await self.show_daily_stats(query, user_id)

            elif data == "stats_total":
                if user_data['role'] == 'head':
                    await self.show_head_total_stats(query)
                else:
                    await self.show_total_stats(query, user_id)

            elif data == "manage_managers":
                await self.show_manage_managers(query)

            elif data == "reset_stats":
                await self.show_reset_options(query)

            elif data.startswith("manager_"):
                manager_id = int(data.split('_')[1])
                await self.show_reset_options(query, manager_id)

            elif data == "reset_all":
                # –£–¥–æ–±–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
                await self.show_reset_options(query)

            elif data.startswith("reset_daily_"):
                if data == "reset_all_daily":
                    self.reset_daily_stats()
                    await query.edit_message_text("‚úÖ –í—Å—è –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                else:
                    manager_id = int(data.split('_')[2])
                    self.reset_daily_stats(manager_id)
                    await query.edit_message_text("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                await asyncio.sleep(1)
                await self.show_main_menu(query, user_id, user_data['role'])

            elif data.startswith("reset_monthly_"):
                if data == "reset_all_monthly":
                    self.reset_monthly_stats()
                    await query.edit_message_text("‚úÖ –í—Å—è –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                else:
                    manager_id = int(data.split('_')[2])
                    self.reset_monthly_stats(manager_id)
                    await query.edit_message_text("‚úÖ –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                await asyncio.sleep(1)
                await self.show_main_menu(query, user_id, user_data['role'])

            elif data == "export_data":
                await self.export_to_excel(query)

            elif data == "calculator":
                await self.show_calculator(query, user_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            elif data.startswith("tariff_"):
                tariff_key = data.replace("tariff_", "")
                if tariff_key in TARIFFS:
                    await self.show_tariff_submenu(query, tariff_key)
                else:
                    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –ø–æ–¥–º–µ–Ω—é (–Ω–∞–ø—Ä. 'mts_real_1month')
            elif data in self._all_submenu_keys():
                # data –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ —É–∂–µ –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ record_key
                await self.record_sale(query, data)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–¥—É—Ç —á–µ—Ä–µ–∑ 'tariff_' (–Ω–∞ —Å–ª—É—á–∞–π)
            elif data in TARIFFS and TARIFFS[data]['submenu'] is None:
                await self.record_sale(query, data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception:
                pass

    def _all_submenu_keys(self):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–¥–º–µ–Ω—é"""
        keys = set()
        for t in TARIFFS.values():
            submenu = t.get('submenu')
            if submenu:
                keys.update(submenu.keys())
        return keys

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user = update.effective_user
        user_id = user.id

        if user_id not in self.sales_data:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        user_data = self.sales_data[user_id]
        daily_stats = self.get_daily_stats(user_id)

        if not daily_stats.get('sales'):
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})\n\n"
            message += "üì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç"
        else:
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})\n\n"
            total_sales = 0

            sorted_sales = sorted(daily_stats['sales'].items(), key=lambda x: self.get_display_name(x[0]))
            for tariff_key, count in sorted_sales:
                tariff_name = self.get_display_name(tariff_key)
                message += f"‚Ä¢ {tariff_name}: {count} –ø—Ä–æ–¥–∞–∂\n"
                total_sales += count

            message += f"\nüìà –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_sales} –ø—Ä–æ–¥–∞–∂"

        await update.message.reply_text(message)

    async def report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /report - –æ–±—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        user = update.effective_user
        user_id = user.id

        if user_id not in self.sales_data:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        user_data = self.sales_data[user_id]

        if user_data['role'] != 'head':
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            return

        monthly_stats = self.get_monthly_stats()

        if not monthly_stats:
            message = f"üìà –û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            message += "üì≠ –ü—Ä–æ–¥–∞–∂ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –µ—â–µ –Ω–µ—Ç"
        else:
            message = f"üìà –û–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ {datetime.now().strftime('%B %Y')}\n\n"
            total_all_sales = 0
            managers_stats = {}

            for user_str, user_data in monthly_stats.items():
                manager_name = user_data['full_name']
                managers_stats[manager_name] = {'total': 0}

                for count in user_data['sales'].values():
                    managers_stats[manager_name]['total'] += count
                    total_all_sales += count

            message += "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–ù–ï–î–ñ–ï–†–ê–ú:\n\n"
            for manager, stats in sorted(managers_stats.items()):
                message += f"üë§ {manager}: {stats['total']} –ø—Ä–æ–¥–∞–∂\n"

            message += f"\nüéØ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–ê–ñ: {total_all_sales}"

        await update.message.reply_text(message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É (–≤—ã–∑–æ–≤ –ª–∏–±–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ callback'–æ–º)
        help_text = (
            "ü§ñ *–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:*\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/report - –û–±—â–∏–π –æ—Ç—á–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)\n"
            "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/id - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID –∏ username\n\n"
            "*–î–û–°–¢–£–ü–ù–´–ï –¢–ê–†–ò–§–´:*\n"
            "‚Ä¢ üì± –ú–¢–° –†–∏–∏–ª (1 –ú–µ—Å—è—Ü/–ê–±–æ–Ω–µ–º–µ–Ω—Ç)\n"
            "‚Ä¢ üì∂ –ú–¢–° –ë–æ–ª—å—à–µ (1 –ú–µ—Å—è—Ü/–ê–±–æ–Ω–µ–º–µ–Ω—Ç)\n"
            "‚Ä¢ ‚ö° –ú–¢–° –°—É–ø–µ—Ä\n"
            "‚Ä¢ üõ°Ô∏è –ú–µ–º–±—Ä–∞–Ω–∞\n"
            "‚Ä¢ üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫\n"
            "‚Ä¢ üõí –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ X5 (–ù–æ–≤—ã–π/–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è/–î–µ–π—Å—Ç–≤—É—é—â–∏–π)\n"
            "‚Ä¢ üë∂ –Ø–Ω–¥–µ–∫—Å –ü–æ–¥–ø–∏—Å–∫–∞ –î–µ—Ç—è–º (–ù–æ–≤—ã–π/–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è/–î–µ–π—Å—Ç–≤—É—é—â–∏–π)\n\n"
            "*üìä –°–ò–°–¢–ï–ú–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò:*\n"
            "- –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)\n"
            "- –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ)\n"
            "- –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )

        # –µ—Å–ª–∏ —ç—Ç–æ Update (–∫–æ–º–∞–Ω–¥–∞) ‚Äî –ø—Ä–∏—à–ª—ë–º as message, –∏–Ω–∞—á–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º callback'–æ–º
        if isinstance(update, Update):
            await update.message.reply_text(help_text, parse_mode='Markdown')
        else:
            await update.edit_message_text(help_text, parse_mode='Markdown')
            await self.show_main_menu(update, update.from_user.id, self.sales_data[update.from_user.id]['role'])

    async def get_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /id - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user
        role = self.get_user_role(user.username)

        message = (
            f"üÜî **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
            f"**ID:** `{user.id}`\n"
            f"**Username:** @{user.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"**–ò–º—è:** {user.full_name}\n"
            f"**–†–æ–ª—å:** {role or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n\n"
            "üìã **–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:**\n"
            "1. –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à username —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é\n"
            "2. –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π /start"
        )

        await update.message.reply_text(message, parse_mode='Markdown')

    async def export_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /export –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        user_id = user.id

        if user_id not in self.sales_data:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            return

        user_data = self.sales_data[user_id]

        if user_data['role'] != 'head':
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            return

        await update.message.reply_text("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")

        # –°–æ–∑–¥–∞—ë–º mock-query –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ export_to_excel
        class MockQuery:
            def __init__(self, message):
                self.message = message

        mock_query = MockQuery(update.message)
        await self.export_to_excel(mock_query)

    async def show_calculator(self, query, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤, —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ PRICE_MAP"""
        user_data = self.sales_data[user_id]

        # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è ‚Äî —Å—É–º–º–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        if user_data['role'] == 'head':
            monthly_stats = self.get_monthly_stats()
            if not monthly_stats:
                message = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"
                await query.edit_message_text(message)
                return

            total_all = 0
            message = f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–∞ ‚Äî {datetime.now().strftime('%B %Y')}\n\n"
            for user_str, udata in monthly_stats.items():
                manager_total = 0
                message += f"üë§ {udata.get('full_name','‚Äî')}:\n"
                for tariff_key, count in udata.get('sales', {}).items():
                    price = PRICE_MAP.get(tariff_key, 0)
                    subtotal = price * count
                    manager_total += subtotal
                    message += f"   ‚Ä¢ {self.get_display_name(tariff_key)}: {count} √ó {price} = {subtotal} ‚ÇΩ\n"
                message += f"   ‚ûú –í—Å–µ–≥–æ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_total} ‚ÇΩ\n\n"
                total_all += manager_total

            message += f"üéØ –ò–¢–û–ì–û –ü–û –í–°–ï–ú –ú–ï–ù–ï–î–ñ–ï–†–ê–ú: {total_all} ‚ÇΩ"

        else:
            monthly_stats = self.get_monthly_stats(user_id)
            stats = monthly_stats.get('sales', {}) if monthly_stats else {}

            if not stats:
                message = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
                await query.edit_message_text(message)
                return

            total = 0
            message = f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–∞ ‚Äî {datetime.now().strftime('%B %Y')}\n\n"
            for tariff_key, count in stats.items():
                price = PRICE_MAP.get(tariff_key, 0)
                subtotal = price * count
                total += subtotal
                message += f"‚Ä¢ {self.get_display_name(tariff_key)}: {count} √ó {price} = {subtotal} ‚ÇΩ\n"

            message += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("=" * 60)
        print("ü§ñ –ó–ê–ü–£–°–ö –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê –° –°–ò–°–¢–ï–ú–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
        print("=" * 60)
        print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if self.token else "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: JSON + Excel")
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –î–Ω–µ–≤–Ω–∞—è + –ú–µ—Å—è—á–Ω–∞—è")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–±—Ä–æ—Å–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("=" * 60)

        try:
            self.application.run_polling()
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
    # pip install python-telegram-bot openpyxl

    bot = SalesBot(BOT_TOKEN)
    bot.run()